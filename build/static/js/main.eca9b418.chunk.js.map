{"version":3,"sources":["SocketContext.js","components/MainPage/MainPage.js","elements/ItemList/ItemList.js","elements/MenuCol/MenuCol.js","utils/timeConversions.js","elements/MainView/UplinkTab/UplinkTab.js","elements/MainView/DownlinkTab/SendBytesMenu/SendBytesMenu.js","elements/MainView/DownlinkTab/Table/TableLine/ButtonGroup/ReadWrite.js","elements/MainView/DownlinkTab/Table/TableLine/Input/Input.js","elements/MainView/DownlinkTab/Table/encode.js","elements/MainView/DownlinkTab/Table/TableLine/TableLine.js","elements/MainView/DownlinkTab/Table/Table.js","elements/MainView/DownlinkTab/DownlinkTab.js","elements/MainView/MainView.js","components/404/404.js","layouts/NotFoundLayout/notFoundLayout.js","layouts/MainLayout/MainLayout.js","app/router/router.js","App.js","serviceWorker.js","index.js","utils/Base64Binary.js"],"names":["SocketContext","React","createContext","MainPage","props","Consumer","socket","MainPageInner","useState","username","setUsername","password","setPassword","nsUrl","setNsUrl","sensors","setSensors","name","activeSensor","setActiveSensor","sensorSelect","setSensorSelect","nsSelect","setNsSelect","invalidCredentials","setInvalidCredentials","external","setExternal","other","setOther","handleSensorChange","sensor","console","log","emit","id","useEffect","on","availableSensors","argv","minimist","process","slice","style","margin","sm","lg","xs","open","toggle","width","caret","outline","theme","map","el","i","onClick","display","placeholder","value","onChange","event","target","type","color","sensorData","ItemList","items","getItemDisplay","activeItem","setActiveItem","item","action","active","JSON","stringify","MenuCol","header","length","timestampToString","ts","date","Date","hours","getHours","minutes","getMinutes","seconds","getSeconds","day","getDate","month","getMonth","year","getFullYear","n","Error","getMonthString","UplinkTab","UplinkViewInner","displayIndex","displayNetwork","setDisplayNetwork","displayApp","setDisplayApp","displayLora","setDisplayLora","page","setPage","messages","setMessages","handleMessageChange","message","ns","app","lora","handlePageChange","parseInt","oldMessages","_","reverse","messageType","fport","e","SendBytesMenu","SendBytesMenuInner","device","port","setPort","base64","setBase64","deveui","setDeveui","stringBytes","setStringBytes","deviceEUI","fluid","padding","Base64Binary","encode","split","handleBytesChange","handleBase64Change","disabled","ReadWrite","element","activeLine","state","setState","clickHandler","a","preventDefault","vertical","key","size","Input","write","includes","options","Object","keys","filter","test","substr","handleChange","className","BitManipulation","__make_multiple_of_8","bits","unshift","__make_equal_number_of_bits","bits1","bits2","__remove_leading_zeros","shift","__make_copy","new_bits","Array","Boolean","get_bits","literal","bit_arr","Math","floor","negative","this","carry","index","NOT","result","dv","DataView","ArrayBuffer","setFloat64","getUint8","toString","val","char_val","charCodeAt","char_bits","concat","string","byte_array","splice","join","byte_bits","init_mask","undefined","mask","to_byte_arr","bytes_arr","byte_val","k","j","Number","shift_left","shift_val","shift_right","AND","bits1_copy","bits2_copy","OR","XOR","bits_copy","check_command","group_or_field","lookup","hasOwnProperty","status","error_code","fields","write_bits","write_value","start_bit","end_bit","current_bits","bits_to_write","format_header","read","or_80_to_write","headersStr","headersInt","int","push","write_to_port","bytes","encoded_data","encode_read","encode_write_field","command","written_bits","written_bytes","encode_write_group","commands","group_lookup","field_names","values","bytes_num","multiple_field_bits","valid","categories","category_str","category","groups_and_fields","group_or_field_str","is_valid","error","lookup_all","parse","command_categories","lookup_categories","case_1","case_2","case_3","TableLine","TableLineInner","groupData","downlinkData","downlinkWrite","setDownlinkWrite","downlinkRead","setDownlinkRead","setActiveLine","RW","setRW","handleRW","handleActiveLineChange","newObject","handleInput","data-root","scope","rowSpan","checked","Table","rawData","setDownlinksObject","unique","isNew","obj","group","handleTableLineChange","updateObject","oldObject","tableLines","dataElement","data","DownlinkTab","DownlinkTabInner","stringifyBytes","byte","toUpperCase","manual","activeCategory","setActiveCategory","categorySelect","setCategorySelect","downlinksObject","encodedObject","setEncodedObject","encodedString","setEncodedString","downlink","str","entries","entry","marginLeft","raw","MainView","MainViewInner","applications","setApplications","setActiveApplication","devices","setDevices","activeDevice","setActiveDevice","isDownlinkSelected","setIsDownlinkSelected","directionSelect","setDirectionSelect","setDisplayIndex","setManual","payload","setPayload","isHex","setIsHex","encrypted","setEncrypted","appkey","setAppkey","nwkkey","setNwkkey","handleApplicationChange","application","handleDeviceChange","replace","justifyContent","paddingLeft","base64payload","hexString","hexStringToBytes","notFoundPage","notFoundLayout","minHeight","flexDirection","children","href","MainLayout","height","AppRoute","Component","component","Layout","layout","rest","render","withRouter","exact","path","notFound","App","window","location","hostname","match","require","config","io","ReactDOM","Provider","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","helpers","_keyStr","decodeArrayBuffer","input","ab","decode","removePaddingChars","indexOf","substring","module","exports","arrayBuffer","uarray","chr1","chr2","chr3","enc2","enc3","enc4","Uint8Array","chunk","encodings","byteLength","byteRemainder","mainLength"],"mappings":"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","file":"static/js/main.eca9b418.chunk.js","sourcesContent":["import React from 'react'\n\nconst SocketContext = React.createContext()\n\nexport default SocketContext\n","import React, {Fragment, useEffect, useState} from 'react'\nimport SocketContext from \"../../SocketContext\";\nimport {\n    Col, Row, FormInput, Button,\n    Dropdown, DropdownToggle, DropdownMenu, DropdownItem\n} from 'shards-react'\n\nimport MainView from \"../../elements/MainView/MainView\";\nimport minimist from 'minimist'\n\nexport default function MainPage(props){\n    return(\n        <Fragment>\n            <SocketContext.Consumer>\n                {socket => <MainPageInner {...props} socket={socket}/>}\n            </SocketContext.Consumer>\n        </Fragment>\n    )\n}\n\nfunction MainPageInner({socket}) {\n    const [username, setUsername] = useState(\"\")\n    const [password, setPassword] = useState(\"\")\n    const [nsUrl, setNsUrl] = useState(\"lorawan-ns-na.tektelic.com\")\n    const [sensors, setSensors] = useState([])\n    const [activeSensor, setActiveSensor] = useState({name: \"Loading sensors...\"})\n    const [sensorSelect, setSensorSelect] = useState(false)\n    const [nsSelect, setNsSelect] = useState(false)\n    const [invalidCredentials, setInvalidCredentials] = useState(false)\n    const [external, setExternal] = useState(false);\n    const [other, setOther] = useState(false)\n\n    const handleSensorChange = (sensor) => {\n        console.log(sensor)\n        setActiveSensor(sensor)\n        socket.emit(\"updateSensorId\", sensor.id)\n    }\n\n    const login = () => {\n        socket.emit(\"login\", {nsUrl: nsUrl, username: username, password: password})\n    }\n\n    useEffect(()=>{\n        if (socket !== null) {\n            socket.emit(\"getAvailableSensors\")\n            socket.on(\"availableSensors\", (availableSensors) => {\n                setInvalidCredentials(false)\n                console.log(availableSensors)\n                setSensors(availableSensors)\n                handleSensorChange(availableSensors[0])\n            })\n            socket.on(\"loginFail\", ()=>{\n                setInvalidCredentials(true)\n            })\n            socket.on(\"loginSuccess\", ()=>{\n                socket.emit(\"getUserApplications\")\n            })\n        }\n    }, [socket])\n\n    useEffect(()=>{\n\n        const argv = minimist(process.argv.slice(2))\n        console.log(argv)\n    })\n\n    return (\n        <Fragment>\n            <Row style={{margin: 20}}>\n                <Col sm={12} lg={2} xs={12}>\n                    <Dropdown\n                        open={sensorSelect}\n                        toggle={()=>setSensorSelect(!sensorSelect)}\n                    >\n                        <DropdownToggle\n                            style = {{width: \"100%\"}}\n                            caret\n                            outline\n                            theme=\"light\"\n                        >\n                            {activeSensor.name}\n                        </DropdownToggle>\n                        <DropdownMenu>\n                            {sensors.map((el, i)=>{\n                                return (\n                                    <DropdownItem onClick={()=>handleSensorChange(el)}>\n                                        {el.name}\n                                    </DropdownItem>\n                                )\n                            })}\n                        </DropdownMenu>\n                    </Dropdown>\n                </Col>\n                <Col sm={12} lg={2} xs={12} style={{display: external ? \"none\" : \"inline-block\"}}>\n                    <FormInput\n                        placeholder=\"Username\"\n                        value={username}\n                        onChange={(event)=> {setUsername(event.target.value)}}\n                    />\n                </Col>\n                <Col sm={12} lg={2} xs={12} style={{display: external ? \"none\" : \"inline-block\"}}>\n                    <FormInput\n                        placeholder=\"Password\"\n                        value={password}\n                        onChange={(event)=> {setPassword(event.target.value)}}\n                        type=\"password\"\n                    />\n                </Col>\n                <Dropdown open={nsSelect} toggle={()=>setNsSelect(!nsSelect)} >\n                    <DropdownToggle\n                        style = {{width: \"100%\"}}\n                        caret\n                        outline\n                        theme=\"light\"\n                    >\n                        {other ? \"Other Instance\" : nsUrl}\n                    </DropdownToggle>\n                    <DropdownMenu>\n                        <DropdownItem onClick={()=>{\n                            setNsUrl(\"https://lorawan-ns-na.tektelic.com\")\n                            setExternal(false)\n                            setOther(false)\n                        }}>\n                            TEKTELIC NA\n                        </DropdownItem>\n                        <DropdownItem onClick={()=>{\n                            setNsUrl(\"https://lorawan-ns-eu.tektelic.com\")\n                            setExternal(false)\n                            setOther(false)\n                        }}>\n                            TEKTELIC EU\n                        </DropdownItem>\n                        <DropdownItem onClick={()=>{\n                            setNsUrl(\"https://lorawan-ns-dev.tektelic.com\")\n                            setExternal(false)\n                            setOther(false)\n                        }}>\n                            TEKTELIC DEV\n                        </DropdownItem>\n                        <DropdownItem onClick={()=>{\n                            setNsUrl(\"\")\n                            setExternal(false)\n                            setOther(true)\n                        }}>\n                            Other TEK-NS Instance\n                        </DropdownItem>\n                        <DropdownItem onClick={()=>{\n                            setNsUrl(\"External NS\")\n                            setExternal(true)\n                            setOther(false)\n                        }}>\n                            External NS\n                        </DropdownItem>\n                    </DropdownMenu>\n                </Dropdown>\n                <Col sm={12} lg={3} xs={12} style={{display: !other ? \"none\" : \"inline-block\"}}>\n                    <FormInput\n                        placeholder=\"http(s)://YOUR_URL.COM (no backslash)\"\n                        value={nsUrl}\n                        onChange={(event)=> {setNsUrl(event.target.value)}}\n                    />\n                </Col>\n                <Col sm={12} lg={1} xs={12} style={{display: external ? \"none\" : \"inline-block\"}}>\n                    {/*<Button onClick={()=>mqttConnect()}>Connect</Button>*/}\n                    <Button theme=\"success\" onClick={login}>Connect</Button>\n                </Col>\n                <Col sm={12} lg={2} xs={12} style={{color: 'red'}}>\n                    {\n                        invalidCredentials ?\n                            \"Invalid Credentials\"\n                            :\n                            null\n                    }\n                </Col>\n            </Row>\n            <Row>\n                <Col>\n                    <MainView sensorData={activeSensor} external={external}/>\n                    {/* sensors is passed down to DownlinkTab */}\n                </Col>\n            </Row>\n        </Fragment>\n    )\n\n\n}\n","import React, {useState, useEffect} from 'react'\nimport {ListGroup, ListGroupItem} from \"shards-react\";\n\nexport default function ItemList({items, onClick, getItemDisplay}){\n\n    const [activeItem, setActiveItem] = useState(items ? (items[0] ? items[0] : null) : null);\n\n    if (items) {\n        return (\n            <ListGroup>\n                {\n                    items.map((item, i) => {\n                        return (\n                            <ListGroupItem\n                                action={true}\n                                active={ activeItem === item || (activeItem === null && i === 0) }\n                                onClick={() =>{\n                                    setActiveItem(item)\n                                    if (onClick){\n                                        onClick(item)\n                                    }\n                                }}\n                                /*key={item}*/\n                            >\n                                {getItemDisplay ? getItemDisplay(item) : JSON.stringify(item)}\n                            </ListGroupItem>\n                        );\n                    })\n                }\n            </ListGroup>\n        )\n    }\n    else {\n        return (\n            <p>Loading...</p>\n        )\n    }\n}\n","import React from 'react'\nimport {Card, CardHeader, Col} from \"shards-react\";\nimport ItemList from \"../ItemList/ItemList\";\n\nexport default function MenuCol({lg, header, items, onClick, getItemDisplay, style}){\n    return(\n        <Col sm={12} lg={lg} xs={12} style={style}>\n            <Card>\n                <CardHeader>\n                    {header}\n                </CardHeader>\n                {items && items.length > 0 ?\n                    <ItemList\n                        items = {items}\n                        onClick = {onClick}\n                        getItemDisplay = {getItemDisplay}\n                    />\n                    :\n                    null\n\n                }\n            </Card>\n        </Col>\n    )\n}\n","export function timestampToString(ts) {\n    let date = new Date(ts)\n    let hours = date.getHours()\n    let minutes = date.getMinutes()\n    let seconds = date.getSeconds()\n    let day = date.getDate()\n    let month = date.getMonth()+1\n    let year = date.getFullYear()\n    return (\n        ( hours   > 9 ? hours   : (\"0\"+hours) )  + \":\" +\n        ( minutes > 9 ? minutes : (\"0\"+minutes) ) + \":\" +\n        ( seconds > 9 ? seconds : (\"0\"+seconds) ) + \", \" +\n        day + \" \" + getMonthString(month) + \" \" + year\n    )\n}\n\nfunction getMonthString(n){\n    if (n==1){\n        return \"Jan\"\n    }\n    if (n==2){\n        return \"Feb\"\n    }\n    if (n==3){\n        return \"Mar\"\n    }\n    if (n==4){\n        return \"Apr\"\n    }\n    if (n==5){\n        return \"May\"\n    }\n    if (n==6){\n        return \"Jul\"\n    }\n    if (n==7){\n        return \"Jun\"\n    }\n    if (n==8){\n        return \"Aug\"\n    }\n    if (n==9){\n        return \"Sep\"\n    }\n    if (n==10){\n        return \"Oct\"\n    }\n    if (n==11){\n        return \"Nov\"\n    }\n    if (n==12){\n        return \"Dec\"\n    }\n    throw new Error(\"Month value should be between 1 and 12.\")\n}\n\n","import React, {Fragment, useState, useEffect} from 'react'\nimport {Button, Col, FormInput, Row} from \"shards-react\";\nimport SocketContext from \"../../../SocketContext\";\nimport {timestampToString} from \"../../../utils/timeConversions\";\nimport ItemList from \"../../ItemList/ItemList\";\nimport _ from \"lodash\";\n\nexport default function UplinkTab (props){\n    return(\n        <Fragment>\n            <SocketContext.Consumer>\n                {socket => <UplinkViewInner {...props} socket={socket}/>}\n            </SocketContext.Consumer>\n        </Fragment>\n    )\n}\n\nfunction UplinkViewInner({socket, displayIndex, display}){\n    if (socket) {\n\n    }\n\n    const [displayNetwork, setDisplayNetwork] = useState(\"\")\n    const [displayApp, setDisplayApp] = useState(\"\")\n    const [displayLora, setDisplayLora] = useState(\"\")\n    const [page, setPage] = useState(1)\n    const [messages, setMessages] = useState([])\n\n    const handleMessageChange = (message) => {\n        setDisplayNetwork(\n            JSON.stringify(\n                message.ns,\n                null,\n                2\n            )\n        )\n        setDisplayApp(\n            JSON.stringify(\n                message.app,\n                null,\n                2\n            )\n        )\n        setDisplayLora(\n            JSON.stringify(\n                message.lora,\n                null,\n                2\n            )\n        )\n    }\n\n    const handlePageChange = (n) => {\n        setPage(page => parseInt(page) + parseInt(n))\n    }\n\n    useEffect(()=>{\n        if (messages && messages.length !== 0)\n            handleMessageChange(messages[0])\n        else\n            handleMessageChange({\n                ns: \"No messages to show from this sensor.\",\n                app: \"No messages to show from this sensor.\",\n                lora: \"No messages to show from this sensor.\"\n            })\n    }, [messages])\n\n    useEffect(()=>{\n        socket\n        .on(\"allDeviceMessages\", (messages) => {\n            console.log(messages)\n            setMessages(oldMessages => _.reverse(messages))\n        })\n        .on(\"newDeviceMessage\", (message) => {\n            console.log(message)\n            setMessages(oldMessages => [message, ...oldMessages])\n        })\n        .on(\"decodedMessage\", (message) => {\n            console.log(message)\n            setMessages(oldMessages => [message, ...oldMessages])\n        })\n    }, [socket])\n\n    return (\n        <Fragment>\n            <Row style={{display: display, width: \"100%\"}}>\n                <Col sm={12} lg={5} xs={12}>\n                    {messages.length > 0 ?\n                        <Fragment>\n                            <ItemList\n                                items = {messages.slice( 20*(page-1), 20*(page) )}\n                                onClick = {handleMessageChange}\n                                getItemDisplay={(item)=> {\n                                    return timestampToString(item.ns.ts) + \"  |  \" + item.ns.messageType + \" | \" +\n                                        item.ns.fport\n                                }}\n                            />\n                            <Row>\n                                <Button\n                                    onClick = {()=>handlePageChange(-1)}\n                                >\n                                    <p>{\"<<\"}</p>\n                                </Button>\n                                <FormInput\n                                    style={{width: \"30%\"}}\n                                    value={page}\n                                    onChange = {(e)=>{\n                                        if (e.target.value !== \"\")\n                                            setPage(e.target.value)\n                                    }}\n                                    placeholder=\"Page number (1-50)\"\n                                />\n                                <Button\n                                    onClick = {()=>handlePageChange(+1)}\n                                >\n                                    <p>{\">>\"}</p>\n                                </Button>\n                            </Row>\n\n                        </Fragment>\n                        :\n                        null\n\n                    }\n                </Col>\n\n                <Col sm={12} lg={7} xs={12}>\n                    <pre>\n                        {displayIndex === 0 ?\n                            displayNetwork :\n                            displayIndex === 1 ?\n                                displayApp :\n                                displayLora\n                        }\n                    </pre>\n                </Col>\n            </Row>\n        </Fragment>\n    )\n}\n\n","import React, {Fragment, useEffect, useState} from 'react'\nimport {Button, Card, CardTitle, Col, Container, FormInput, Row} from \"shards-react\";\nimport SocketContext from \"../../../../SocketContext\";\n\nimport Base64Binary from \"../../../../utils/Base64Binary\";\n\nexport default function SendBytesMenu(props){\n    return(\n        <Fragment>\n            <SocketContext.Consumer>\n                {socket => <SendBytesMenuInner {...props} socket={socket}/>}\n            </SocketContext.Consumer>\n        </Fragment>\n    )\n}\n\nfunction SendBytesMenuInner({socket, device}) {\n\n    const [port, setPort] = useState(\"\")\n    const [base64, setBase64] = useState(\"\")\n    const [deveui, setDeveui] = useState(\"\")\n    const [stringBytes, setStringBytes] = useState(\"\")\n\n    const handleBase64Change = (base64) => {\n        setBase64(base64)\n        // setStringBytes(Base64Binary.decode(base64)\n        //     .map((el)=> el.toString(16))\n        //     //.toString()\n        // )\n    }\n\n    const handleBytesChange = (stringBytes) => {\n        setStringBytes(stringBytes)\n        setBase64(Base64Binary.encode( stringBytes.split(\" \").map(el=>parseInt(el, 16)) ))//replace the commas with spaces\n    }\n\n    useEffect(()=>{\n        if (device && device.deviceEUI)\n            setDeveui(device.deviceEUI)\n    }, [device])\n\n    return (\n        <Fragment>\n            <Container fluid>\n                <Row>\n                    <Col sm={12} lg={12} xs={12}>\n                        <Card style={{padding: 20}}>\n                            <CardTitle>\n                                Encode Hex Payload\n                            </CardTitle>\n                            <Row>\n                                <Col sm={12} lg={4} xs={12}>\n                                    <FormInput placeholder=\"Enter bytes\"\n                                               value={stringBytes}\n                                               onChange={(event)=> {handleBytesChange(event.target.value)}}\n                                    />\n                                </Col>\n                                <Col sm={12} lg={4} xs={12}>\n                                    <FormInput placeholder=\"Base64 encoded bytes...\"\n                                               value={base64}\n                                               onChange={(event)=> {handleBase64Change(event.target.value)}}\n                                    />\n                                </Col>\n                                <Col sm={12} lg={4} xs={12}>\n                                    <FormInput placeholder=\"Port\"\n                                               value={port}\n                                               onChange={(event)=> {setPort(event.target.value)}}\n                                    />\n                                </Col>\n                            </Row>\n\n                            <FormInput placeholder=\"DevEUI\"\n                                       value={deveui}\n                                       onChange={(event)=> {setDeveui(event.target.value)}}\n                            />\n\n                            {/*<Button\n                                style={{margin: 10}}\n                                onClick={()=>{\n                                    let array = stringBytes.split(\" \").map((el)=>parseInt(el, 16))\n                                    setBase64(Base64Binary.encode(array))\n                                }}\n                            >\n                                Base64 Encode\n                            </Button>*/}\n\n                            <Button\n                                disabled = {!device} // I HAVE NO CLUE WHY THE HELL THIS IS TRUE WHEN DEVICE IS NULL\n                                // WHAT THE FUCK??\n                                onClick={()=>{\n                                    socket.emit(\"downlink\", {deveui, port, base64})\n                                }}\n                            >\n                                Send\n                            </Button>\n\n                        </Card>\n                    </Col>\n                </Row>\n            </Container>\n        </Fragment>\n    )\n}\n","import React, {useState} from 'react'\nimport {Button, ButtonGroup,} from 'shards-react'\n\n\nconst ReadWrite = ({element, activeLine, onChange}) => {\n\n  const [state, setState] = useState([...element[\"access\"]][0])\n  const [active, setActive] = useState(false)\n\n  const clickHandler = async (el, e) => {\n    e.preventDefault()\n    await setState(el)\n    onChange(element, el)\n  }\n  // useMemo(()=> {\n  //   ([...element[\"Access\"]].length === 1) && setState([...element[\"Access\"]][0])\n  // }, [element, setState])\n\n\n  return (\n\n    <ButtonGroup vertical>\n    {[...element[\"access\"]].map((el, i) =>{\n      return <Button outline disabled={!activeLine} onClick={(e)=>clickHandler(el, e)} key={el} active = {el === state} size={\"sm\"} >{el === \"R\" ? \"Read\" : \"Write\"}</Button>\n    })}\n    </ButtonGroup>\n  )\n }\n\n export default ReadWrite\n","import React, {Fragment} from 'react'\n\nimport {FormInput, FormSelect} from \"shards-react\";\n\n\nconst Input = ({element, activeLine, onChange}) => {\n    const write = [...element[\"access\"]].includes('W')\n\n    const options =\n        Object.keys(element).filter((el)=>{\n            return ((/^(opt)[0-9]{1,2}$/.test(el)) && element[el] !== '')\n        })\n        .map((el,i )=>{\n            return [[element[el]], element[`val` + el.substr(3)]]\n        })\n\n    const handleChange = (e) => {\n        onChange(element, e.target.value)\n    }\n\n    if(write) {\n        if(options.length){\n            return (\n                <Fragment>\n                    <FormSelect size=\"sm\" disabled={!activeLine} onChange = {handleChange}>\n                        {options.map((el)=>{\n                            return (\n                                <option value={el[1]} key={el[0]}>{el[0]}</option>\n                            )\n                        })}\n                    </FormSelect>\n                </Fragment>\n            )\n        }\n        else {\n            return <FormInput size=\"sm\" placeholder={element[\"parameter_description\"]} className=\"mb-2\" onChange = {handleChange}/>\n        }\n    }\n\n    else {\n        return (\n            <Fragment>\n\n            </Fragment>\n        )\n    }\n}\n\n\n\nexport default Input\n","var BitManipulation = {\n    // a \"class\" that can perform bitwise operations on an unlimited amount of bits\n    // a replacement for \"BigInt\" since \"BigInt\" is not backwards compatible\n\n    // represents bits as an array of booleans\n\n    // you have to make sure everything is always a multiple of 8 otherwise ascii\n    // encoding is screwed up :(\n\n    __make_multiple_of_8: function (bits) {\n        // appends 0s to the bits until it's a multiple of 8\n        while (bits.length % 8 != 0) {\n            bits.unshift(false);\n        }\n    },\n\n    __make_equal_number_of_bits: function (bits1, bits2) {\n        if (bits1.length == bits2.length) {\n            return\n        }\n        while (bits1.length > bits2.length) {\n            bits2.unshift(false);\n        }\n        while (bits2.length > bits1.length) {\n            bits1.unshift(false);\n        }\n    },\n\n    __remove_leading_zeros: function (bits) {\n        while ((bits[0] != true) && (bits.length > 1)) {\n            bits.shift()\n        }\n    },\n\n    __make_copy: function (bits) {\n        // this function is needed since assignment in js doesn't actually make copies,\n        // and I don't want any of the below functions to change the value of their arguments\n        var new_bits = new Array(bits.length);\n        for (var i = 0; i < bits.length; i++) {\n            new_bits[i] = Boolean(bits[i]);\n        }\n        return new_bits;\n    },\n\n    get_bits: function (literal, type) {\n        // literal is any datatype that is currently supported by this function:\n        // SUPPORTS: unsigned, signed, string, hexstring, double\n        var bit_arr = [];\n        if (typeof (literal) == \"number\" && type === \"unsigned\") {\n            if (literal == 0) {\n                return [0];\n            }\n            while (literal > 0) {\n                bit_arr.unshift(Boolean(literal % 2));\n                literal = Math.floor(literal / 2);\n            }\n\n        } else if (typeof (literal) == \"number\" && type === \"signed\") {\n            if (literal === 0) {\n                return [0];\n            }\n            var negative = false;\n            if (literal < 0) {\n                literal = -literal\n                negative = true;\n            }\n\n            while (literal > 0) {\n                bit_arr.unshift(Boolean(literal % 2));\n                literal = Math.floor(literal / 2);\n            }\n\n            this.__make_multiple_of_8(bit_arr)\n\n            if (negative) {\n                // turning into two's complement\n                bit_arr = this.NOT(bit_arr) // bitwise not all bits\n                // adding one to the negated array\n                var carry = 1;\n                var index = bit_arr.length - 1 // we'll be iterating backwards until index = 0 or carry = 0\n                while (carry) {\n                    if (bit_arr[index]) {\n                        bit_arr[index] = false\n                    } else {\n                        bit_arr[index] = true\n                        carry = 0\n                    }\n                    if (!index)\n                        break;\n                    index--\n                }\n            }\n        } else if (typeof (literal) == \"number\" && type === \"double\") {\n            var i, result = \"\";\n            var dv = new DataView(new ArrayBuffer(8));\n\n            dv.setFloat64(0, literal, false);\n\n            for (i = 0; i < 8; i++) {\n                var bits = dv.getUint8(i).toString(2);\n                while (bits.length !== 8) {\n                    bits = \"0\"+bits\n                }\n                result += bits;\n            }\n            bit_arr = result.split(\"\").map(function (val){\n                return val == '1';\n            });\n        } else if (typeof (literal) == \"string\" && type === \"string\") {\n            for (var i = 0; i < literal.length; i++) {\n                var char_val = literal[i].charCodeAt(0);\n                var char_bits = this.get_bits(char_val, \"unsigned\")\n                this.__make_multiple_of_8(char_bits)\n                bit_arr = bit_arr.concat(char_bits);\n            }\n        } else if (typeof (literal) == \"string\" && type === \"hexstring\") {\n            var string;\n            if (literal.length % 2 === 0) {\n                string = literal.split(\"\")\n            } else {\n                string = (\"0\"+literal).split(\"\")\n            }\n            var byte_array = []\n            while (string.length > 0) {\n                byte_array = byte_array.concat( parseInt(\"0x\"+(string.splice(0, 2)).join(\"\")) )\n            }\n\n            for (var i = 0; i < byte_array.length; i++){\n                var byte = byte_array[i];\n                var byte_bits = byte.toString(2)\n                    .split(\"\")\n                    .map((el)=>el !== \"0\")\n                this.__make_multiple_of_8(byte_bits)\n                bit_arr = [...bit_arr, ...byte_bits];\n            }\n\n        }\n\n        this.__remove_leading_zeros(bit_arr);\n        this.__make_multiple_of_8(bit_arr);\n        return bit_arr;\n    },\n\n    init_mask: function (length, val) {\n        // returns a mask of 1s or 0s, as given by the \"val\" argument\n        if (val === undefined) {\n            val = true;\n        }\n\n        var mask = new Array(length);\n        for (var i = 0; i < length; i++) {\n            mask[i] = val;\n        }\n        return mask;\n    },\n\n    to_byte_arr: function (bits, size) {\n        this.__remove_leading_zeros(bits);\n        this.__make_multiple_of_8(bits);\n\n        var bytes_arr = new Array(bits.length / 8);\n        for (var i = 0; i < bits.length; i += 8) {\n            var byte_val = 0;\n\n            var k = 0\n            for (var j = 7; j >= 0; j--) {\n                byte_val += (bits[i + j] << k);\n                k += 1\n            }\n            bytes_arr[i / 8] = byte_val;\n        }\n\n        if (size === undefined) {\n            return bytes_arr;\n        }\n\n        while (bytes_arr.length < Number(size)) {\n            bytes_arr.unshift(0);\n        }\n        return bytes_arr;\n    },\n\n    shift_left: function (bits, shift_val) {\n        var new_bits = new Array(bits.length + shift_val);\n        for (var i = 0; i < bits.length; i++) {\n            new_bits[i] = Boolean(bits[i]);\n        }\n        for (var i = bits.length; i < new_bits.length; i++) {\n            new_bits[i] = false;\n        }\n\n        this.__remove_leading_zeros(new_bits);\n        this.__make_multiple_of_8(new_bits);\n        return new_bits;\n    },\n\n    shift_right: function (bits, shift_val) {\n        var new_bits = new Array(bits.length);\n\n        for (var j = 0; j < shift_val; j++) {\n            new_bits[j] = false;\n        }\n        for (var i = 0; i < bits.length - shift_val; i++) {\n            new_bits[i + shift_val] = Boolean(bits[i]);\n        }\n\n        this.__remove_leading_zeros(new_bits);\n        this.__make_multiple_of_8(new_bits);\n        return new_bits;\n    },\n\n    AND: function (bits1, bits2) {\n        // returns bits1 & bits2\n        var bits1_copy = this.__make_copy(bits1);\n        var bits2_copy = this.__make_copy(bits2);\n\n        this.__make_equal_number_of_bits(bits1_copy, bits2_copy);\n        var new_bits = new Array(bits1_copy.length);\n        for (var i = 0; i < bits1_copy.length; i++) {\n            new_bits[i] = Boolean(bits1_copy[i] & bits2_copy[i]);\n        }\n\n        this.__remove_leading_zeros(new_bits);\n        this.__make_multiple_of_8(new_bits);\n        return new_bits;\n    },\n\n    OR: function (bits1, bits2) {\n        // returns bits1 | bits2\n        var bits1_copy = this.__make_copy(bits1);\n        var bits2_copy = this.__make_copy(bits2);\n        this.__make_equal_number_of_bits(bits1_copy, bits2_copy);\n        var new_bits = new Array(bits1_copy.length);\n\n        for (var i = 0; i < bits1_copy.length; i++) {\n            new_bits[i] = Boolean(bits1_copy[i] | bits2_copy[i]);\n        }\n\n        this.__remove_leading_zeros(new_bits);\n        this.__make_multiple_of_8(new_bits);\n\n        return new_bits;\n    },\n\n    XOR: function (bits1, bits2) {\n        // returns bits1 ^ bits2\n        var bits1_copy = this.__make_copy(bits1);\n        var bits2_copy = this.__make_copy(bits2);\n        this.__make_equal_number_of_bits(bits1_copy, bits2_copy);\n        var new_bits = new Array(bits1.length);\n\n        for (var i = 0; i < bits1_copy.length; i++) {\n            new_bits[i] = Boolean(bits1_copy[i] ^ bits2_copy[i]);\n        }\n\n        this.__remove_leading_zeros(new_bits);\n        this.__make_multiple_of_8(new_bits);\n\n        return new_bits;\n    },\n\n    NOT: function (bits) {\n        // return !bits\n        var bits_copy = this.__make_copy(bits);\n        var new_bits = new Array(bits.length);\n        for (var i = 0; i < bits_copy.length; i++) {\n            new_bits[i] = !bits_copy[i];\n        }\n        return new_bits\n    },\n}\n// polyfill for backward compatibility with ES 5 and Nashorn\nif (!Object.values) {\n    Object.values = function (obj) {\n        return Object.keys(obj).map(function(e) {\n            return obj[e]\n        })\n    };\n}\n\nfunction check_command(group_or_field, lookup) {\n    // returns true if an individual command is valid, and false otherwise\n\n    // There are 2 things we need to check:\n    //    1. Access - read-only? write-only?\n    //    2. Number of fields\n\n    if (group_or_field.hasOwnProperty(\"read\")) {\n        if (lookup[\"access\"] == \"W\") {\n            return {status: false, error_code: 'Tried reading from write-only field'};\n        }\n        else if ( typeof(group_or_field[\"read\"]) == \"object\" ) {\n            return {status: false, error_code: 'Syntax error, read commands cannot be of type \"object\"'};\n        }\n    }\n    else if (group_or_field.hasOwnProperty(\"write\")) {\n        if (lookup[\"access\"] == \"R\") {\n            return {status: false, error_code: 'Tried writing to read-only field'};\n        }\n        if (typeof(group_or_field[\"write\"]) === \"object\") {\n            var fields = Object.keys(group_or_field[\"write\"]);\n            if (fields.length != Object.keys(lookup).length - 3) {\n                return {status: false, error_code: 'Invalid number of fields in group'};\n            }\n            for (var i = 0; i < fields.length; i++) {\n                if (lookup[fields[i]] === undefined) {\n                    return {status: false, error_code: 'Field \"' + fields[i] + '\" does not exist'}\n                }\n            }\n        }\n\n    }\n    return {status: true, error_code: \"No error\"};\n}\n\nfunction is_valid(commands, sensor) {\n    // returns true if commands are valid, returns false otherwise\n    var valid = true;\n    var categories = Object.keys(commands);\n    for (var i = 0; i < categories.length; i++) {\n        var category_str = categories[i];\n        var category = commands[category_str];\n\n        var groups_and_fields = Object.keys(commands[category_str]);\n        for (var j = 0; j < groups_and_fields.length; j++) {\n            var group_or_field_str = groups_and_fields[j];\n            var group_or_field = category[group_or_field_str];\n\n            var lookup = sensor[category_str][group_or_field_str];\n            if (lookup === undefined) {\n                var msg = (category_str + \" -> \" + group_or_field_str);\n                return {valid: false, message: msg, error_code: 'Field/group \"' + group_or_field_str + '\" does not exist'};\n            }\n\n            valid = check_command(group_or_field, lookup);\n            if (!valid[\"status\"]) {\n                var msg = (category_str + \" -> \" + group_or_field_str);\n                return {valid: false, message: msg, error_code: valid[\"error_code\"]};\n            }\n        }\n    }\n    return {valid: true, message: \"no message\", error_code: \"no error code\"};\n}\n\nfunction write_bits(write_value, start_bit, end_bit, type, current_bits) {\n    // write the bits in write_value to the specified location in current_bits and returns the result as a bit array\n    // Arguments:\n    //      write_value [Number or String] - value to write to \"current_bits\"\n    //      start_bit [Number] - start bit to write to\n    //      end_bit [Number] - end bit to write to\n    //      type [String] - apply type to the value\n    //      current_bits [Bit Array] - bits to write \"write_value\" to\n    if (current_bits === undefined) {\n        current_bits = BitManipulation.get_bits(0);\n    }\n\n    var bits_to_write = BitManipulation.get_bits(write_value, type);\n\n    var length = Number(start_bit) - Number(end_bit) + 1;\n    var mask = BitManipulation.init_mask(length);\n\n    bits_to_write = BitManipulation.AND(bits_to_write, mask);                   // AND bits_to_write with a mask of 1s\n    bits_to_write = BitManipulation.shift_left(bits_to_write, end_bit);       // Shift the bits_to_write to start_bit\n\n    current_bits = BitManipulation.OR(current_bits, bits_to_write);              // OR the bits_to_write with the current_bits\n\n    return current_bits;\n}\n\nfunction format_header(header, read, or_80_to_write) {\n    // takes in the header as a string, and handles the case of where the header is 2 bytes long\n    var headersStr = header.split(\" \")\n    var headersInt = [];\n    for (var i = 0; i < headersStr.length; i++) {\n        var int = parseInt(headersStr[i]);\n        if (!read && or_80_to_write == \"1\") {\n            int = int | 0x80\n        }\n        headersInt.push(int)\n    }\n    return headersInt\n\n}\n\nfunction write_to_port(bytes, port, encoded_data) {\n    // write \"bytes\" to the appropriate \"port\" in \"encoded_data\"\n    if (encoded_data.hasOwnProperty(port)) {\n        // try pushing \"bytes\" onto the appropriate port in \"encoded_data\"\n        encoded_data[port] = encoded_data[port].concat(bytes);\n    }\n    else {\n        // if the port doesn't exist as a key yet, create the key and push \"bytes\" onto it\n        encoded_data[port] = bytes;\n    }\n}\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////\nfunction encode_read(lookup, encoded_data) {\n    var bytes = format_header(lookup[\"header\"], true, lookup[\"or_80_to_write\"]);\n    write_to_port(bytes, lookup[\"port\"], encoded_data);\n}\n\nfunction encode_write_field(command, lookup, encoded_data) {\n    var bytes = format_header(lookup[\"header\"], false, lookup[\"or_80_to_write\"]);\n\n    var value = command[\"write\"];\n    if ( (lookup[\"type\"] !== \"string\") && (lookup[\"type\"] !== \"hexstring\") ) {\n        value = Number(value) - Number(lookup[\"addition\"] ? lookup[\"addition\"] : 0)\n        value = Number(value)/Number(lookup[\"coefficient\"]);\n        // TODO: ideally this should be done inside of write_bits, not before it\n    }\n\n    var written_bits = write_bits(\n        value,\n        parseInt(lookup[\"bit_start\"]),\n        parseInt(lookup[\"bit_end\"]),\n        lookup[\"type\"],\n        0\n    );\n\n    if ( (lookup[\"multiple\"] == 0) || (lookup[\"multiple\"] === undefined) ) {\n        var size = lookup[\"data_size\"];\n    }\n    else {\n        var size = written_bits.length/8;\n    }\n\n    var written_bytes = BitManipulation.to_byte_arr(written_bits, size);\n    bytes = bytes.concat(written_bytes);\n\n    write_to_port(bytes, lookup[\"port\"], encoded_data);     // Add the bytes to the appropriate port in \"encoded data\"\n}\n\nfunction encode_write_group(commands, group_lookup, encoded_data) {\n    var header = group_lookup[\"header\"];\n    var bytes = format_header(header, false, group_lookup[\"or_80_to_write\"]);\n\n    var written_bits = BitManipulation.get_bits(0);\n    var field_names = Object.keys(commands[\"write\"])\n    var values = Object.values(commands[\"write\"]);\n\n    var bytes_num = parseInt(group_lookup[field_names[0]][\"data_size\"]);\n    var multiple_field_bits = [];    // A variable to contain the bits of the \"multiple\" field if it exists\n\n    for (var i = 0; i < field_names.length; i++) {\n        var field_name = field_names[i];\n        var lookup = group_lookup[field_name];\n\n        var value = values[i];\n\n        if ( (lookup[\"type\"] !== \"string\") && (lookup[\"type\"] !== \"hexstring\") ) {\n            value = Number(value) - Number(lookup[\"addition\"] ? lookup[\"addition\"] : 0)\n            value = Number(value)/Number(lookup[\"coefficient\"]);\n            // TODO: ideally this should be done inside of write_bits, not before it\n        }\n\n        if( (lookup[\"multiple\"] == 0) || (lookup[\"multiple\"] === undefined) ) {\n            written_bits = write_bits(\n                value,\n                parseInt(lookup[\"bit_start\"]),\n                parseInt(lookup[\"bit_end\"]),\n                lookup[\"type\"],\n                written_bits\n            );\n        }\n        else {\n            multiple_field_bits = BitManipulation.get_bits(value, lookup[\"type\"]);\n            bytes_num += multiple_field_bits.length/8;\n        }\n    }\n\n    written_bits = written_bits.concat(multiple_field_bits);  // must add multiple_field_bits at the end\n\n    var written_bytes = BitManipulation.to_byte_arr(written_bits, bytes_num);\n    bytes = bytes.concat(written_bytes)\n\n    write_to_port(bytes, group_lookup[\"port\"], encoded_data);\n}\n\nexport default function encode(commands, sensor) {\n    // encodes the commands object into a nested array of bytes\n\n    var valid = is_valid(commands, sensor);\n    if (!valid[\"valid\"]) {\n        // check if commands is valid. If not, raise an error\n        var message = \"Commands are invalid, failed at: \" + valid[\"message\"];\n        var error_code = valid[\"error_code\"];\n\n        return {error : message, error_code: error_code};\n    }\n\n    var lookup_all = JSON.parse(JSON.stringify(sensor));   // clones the sensor json\n    var encoded_data = {};\n    var categories = Object.keys(commands);\n    for (var i = 0; i < categories.length; i++) {   // iterates over the categories of commands\n        var command_categories = commands[categories[i]];\n        var lookup_categories = lookup_all[categories[i]];\n\n        var groups_and_fields = Object.keys(command_categories);\n        for (var j = 0; j < groups_and_fields.length; j++) {    // iterates over the groups of commands\n            var command = command_categories[groups_and_fields[j]];\n            var lookup = lookup_categories[groups_and_fields[j]];\n\n            // Now that we are iterating over all of the commands, the cases that we have to handle are as such:\n            //  1. The read case -> handled by encode_read(...)\n            //  2. The write case where the current key is a field -> handled by encode_write_field(...)\n            //  3. The write case where the current key is a group -> handled by encode_write_group(...)\n\n            // Within cases 2 and 3, there is the case of \"multiple\" or not \"multiple\". These cases are handled\n            // inside of their corresponding functions\n\n            var case_1 = command.hasOwnProperty(\"read\");\n            var case_2 = command.hasOwnProperty(\"write\") && (typeof(command[\"write\"]) != \"object\");\n            var case_3 = !(case_1 || case_2);\n\n            if (case_1) {\n                encode_read(lookup, encoded_data);\n            } else if (case_2) {\n                encode_write_field(command, lookup, encoded_data);\n            } else if (case_3) {\n                encode_write_group(command, lookup, encoded_data); }\n\n\n        }\n    }\n    return encoded_data;\n}\n\n","import React, {Fragment, useState, useEffect} from 'react'\n\nimport {FormCheckbox,} from 'shards-react'\n\nimport ButtonGroup from './ButtonGroup/ReadWrite'\nimport Input from './Input/Input'\nimport SocketContext from \"../../../../../SocketContext\";\n\n// I ripped my hair out trying to keep the decoders/encoders and NS communication strictly on the backend.\n// I gave up. I'm not sure if this is easy to fix, but I just couldn't give less of a crap at this point.\n// Sorry.\n// The reason I gave up is I spent two days trying to get the front to send JSON to encode to backend, and then\n// the backend to send the encoded bytes back here (the bytes are awaited with a Promise)\n// to display to the user. However, something stupid happens when\n// you try to update the state of a downlinkWrite or payload using a Promise: useState doesn't await the Promise, even\n// after explicitly stating *await* in front of it.\n// So, to avoid this problem, I'm adding encode.js from the backend to the frontend.\n\nimport encode from '../encode'\n\nexport default function TableLine(props){\n    return(\n        <Fragment>\n            <SocketContext.Consumer>\n                {socket => <TableLineInner {...props} socket={socket}/>}\n            </SocketContext.Consumer>\n        </Fragment>\n    )\n}\n\nfunction TableLineInner({groupData, downlinkData, display, onChange, sensor, category}){\n    const [downlinkWrite, setDownlinkWrite] = useState({})\n    const [downlinkRead, setDownlinkRead] = useState({})\n\n    const [activeLine, setActiveLine] = useState(false)\n    const [RW, setRW] = useState(\"R\")\n\n    const handleRW = async (element, value) => {\n        setRW(value);\n        onChange(\n            value ==='R' ? downlinkRead : downlinkWrite\n        )\n\n    }\n\n    const handleActiveLineChange = () => {\n\n        var category = Object.keys(RW ==='R' ? downlinkRead : downlinkWrite)[0]\n        var group_or_field = Object.keys((RW ==='R' ? downlinkRead : downlinkWrite)[category])[0]\n\n        var newObject = {\n            [category]: {\n                [group_or_field]: (activeLine) ? null : (RW ==='R' ? downlinkRead : downlinkWrite)[category][group_or_field]\n                // activeLine === true means that it will be false in the end of the function, so treat it as\n                // already false. this makes the Table ignore it while the line isn't active\n            }\n        }\n\n        onChange(newObject)\n\n        // activeLine chagnes asynchronously, so we change it in the end. If we're changing to false, we're treating it\n        // as false above\n        setActiveLine(!activeLine)\n    }\n\n    const handleInput = async (element, value) => {\n        setDownlinkWrite((downlinkWrite)=>{\n            if (!downlinkWrite) { // if downlink is somehow not initiated, although this *shouldn't* happen\n                downlinkWrite = {}\n                downlinkWrite[element[\"category_name\"]] = {}\n                if (element[\"group_name\"] !== \"\"){\n                    downlinkWrite[element[\"category_name\"]][element[\"group_name\"]] = {\"write\": {}}\n                }\n            }\n            if (element[\"group_name\"] !== \"\"){\n                downlinkWrite[element[\"category_name\"]][element[\"group_name\"]][\"write\"][element[\"parameter_name\"]] = value;\n            } else {\n                downlinkWrite[element[\"category_name\"]][element[\"parameter_name\"]] = {\"write\": value};\n            }\n            return {...downlinkWrite}\n        })\n    }\n\n    useEffect(()=>{\n        if (activeLine){\n            console.log(downlinkRead)\n            onChange(RW ==='R' ? downlinkRead : downlinkWrite)\n        }\n    }, [downlinkWrite, downlinkRead])\n\n    //setting initial conditions for downlinkRead and downlinkWrite\n    useEffect(()=>{\n        setActiveLine(false)\n        setDownlinkRead((downlinkRead) => {\n            downlinkRead[groupData[0][\"category_name\"]] = {}\n            if (groupData[0][\"group_name\"] !== \"\") {\n                downlinkRead[groupData[0][\"category_name\"]][groupData[0][\"group_name\"]] = {\"read\": true};\n            }\n            else {\n                downlinkRead[groupData[0][\"category_name\"]][groupData[0][\"parameter_name\"]] = {\"read\": true};\n            }\n            return {...downlinkRead}\n        })\n        setDownlinkWrite((downlinkWrite)=>{\n            if (groupData[0][\"access\"] !== \"\" || groupData[0][\"access\"] !== \"R\"){\n                downlinkWrite[ groupData[0][\"category_name\"] ] = {}\n                if (groupData[0][\"group_name\"] !== \"\") {\n                    downlinkWrite[groupData[0][\"category_name\"]][groupData[0][\"group_name\"]] = {\"write\": {}}\n                    for (let i = 0; i < groupData.length; i++) {\n                        downlinkWrite[groupData[i][\"category_name\"]][groupData[i][\"group_name\"]][\"write\"][groupData[i][\"parameter_name\"]] = 0;\n\n                    }\n                } else {\n                    downlinkWrite[groupData[0][\"category_name\"]][groupData[0][\"parameter_name\"]] = {\"write\": 0};\n                }\n            }\n            return {...downlinkWrite}\n        })\n    }, [downlinkData])\n\n    return (\n        <Fragment>\n            { (groupData.length > 1) ?\n                <tr\n                    data-root={groupData[0][\"category_description\"]}\n                    key={sensor+\"_\"+category+\"_\"+\"header\"}\n                    style={{display: display, color: \"#0067F4\"}}\n                >\n                    <th>\n                        {groupData[0][\"group_description\"]}\n                    </th>\n                </tr>\n               :\n               null\n            }\n            {groupData.map((el, i)=> {\n                return (\n                    <tr\n                        data-root={el[\"category_description\"]}\n                        key={sensor+\"_\"+category+\"_\"+el[\"parameter_name\"]}\n                        style={{display: display}}\n                    >\n                        <th scope=\"row\" style={{'opacity':'100%'}} >{el[\"parameter_description\"]}</th>\n                        {i === 0 && (\n                            <td rowSpan={groupData.length} className=\"switcher\">\n                                <FormCheckbox\n                                    toggle\n                                    checked={activeLine}\n                                    onChange={handleActiveLineChange}\n                                />\n                            </td>\n                        )}\n                        {i === 0 && (\n                            <td rowSpan={groupData.length} className={'tableLine ' + (activeLine && 'activeLine')}>\n                                <ButtonGroup element = {el} activeLine = {activeLine} onChange={handleRW}/>\n                            </td>\n                        )}\n                        <td className={'tableLine ' + (activeLine && 'activeLine')}>\n                            {RW === \"W\" && <Input element = {el} activeLine = {activeLine} onChange={handleInput}/>}\n                        </td>\n\n                        {/*{i === 0 && (*/}\n                        {/*    <td rowSpan={groupData.length} className={'tableLine ' + (activeLine && 'activeLine')}>*/}\n                        {/*        {payload}*/}\n                        {/*    </td>*/}\n                        {/*)}*/}\n                    </tr>\n                )\n            })}\n        </Fragment>\n    )\n}\n","import React from 'react'\nimport TableLine from './TableLine/TableLine'\n\nexport default function Table ({\n    downlinkData /*sent down to TableLine*/,\n    rawData,\n    category,\n    setDownlinksObject\n    }) {\n\n    let unique = []\n    console.log(\"data\")\n    console.log(rawData)\n    for (let i = 0; i < rawData.length; i++){\n        let isNew = true;\n        for (const obj of unique) {\n            if (\n                (obj.group === rawData[i][\"group_name\"] && obj.category === rawData[i][\"category_name\"])\n            ){\n                isNew = false\n            }\n        }\n        if (isNew){\n            unique.push({\n                // parameter: data[i][\"parameter_name\"],\n                group: rawData[i][\"group_name\"],\n                category: rawData[i][\"category_name\"]\n            })\n        }\n    }\n\n    const handleTableLineChange = (updateObject) => {\n        if (updateObject) {\n            console.log(updateObject)\n            setDownlinksObject((oldObject)=>{\n                // we need to overwrite only the desired group or field rather than the entire category, which is why\n                // we're first figuring out category, group, and/or field before inserting the desired value\n                // into downlinkObject\n                var newObject = {...oldObject}\n                var category = Object.keys(updateObject)[0]\n                var group_or_field = Object.keys(updateObject[category])[0]\n\n                if (updateObject[category][group_or_field] === null) {\n                    // if the above is true then we need to either delete the group_or_field from the DL Object\n                    // or not add it if it hasn't been added previously\n                    if (newObject[category])\n                        delete newObject[category][group_or_field]\n                    return newObject\n                }\n\n                if (!newObject[category]){\n                    newObject[category] = {}\n                }\n                newObject[category][group_or_field] = updateObject[category][group_or_field]\n\n                return newObject\n            })\n        }\n    }\n\n    const tableLines = unique.map((el, i) => {\n        const groupData = rawData.filter((dataElement) => {\n            return dataElement[\"group_name\"] === el.group && dataElement[\"category_name\"] === el.category\n        })\n        console.log(el.group, el.category)\n        console.log(groupData)\n\n        if (el.group === \"\") {\n            return (\n                groupData.map((data) => {\n                    return <TableLine\n                        downlinkData={downlinkData}\n                        groupData={[data]}\n                        key={data[\"category_name\"] + \"_\" + data[\"parameter_name\"]}\n                        display={category === el.category ? \"table-row\" : \"none\"}\n                        onChange={handleTableLineChange}\n                    />\n                })\n            )\n        }\n\n        return <TableLine\n            downlinkData={downlinkData}\n            groupData={groupData}\n            key={groupData[0][\"category_name\"] + \"_\" + groupData[0][\"group_name\"]}\n            display={category === el.category ? \"table-row\" : \"none\"}\n            onChange={handleTableLineChange}\n        />\n    })\n\n    return (\n        <table className=\"table mb-0\">\n            <thead className=\"bg-light\">\n            <tr className=\"smaller\">\n                <th scope=\"col\" className=\"border-0\" style = {{width: \"30%\"}}>Label</th>\n                <th scope=\"col\" className=\"border-0\" style = {{width: \"10%\"}}></th>\n                <th scope=\"col\" className=\"border-0\" style = {{width: \"10%\"}}></th>\n                <th scope=\"col\" className=\"border-0\" style = {{width: \"30%\"}}>Value</th>\n                {/*<th scope=\"col\" className=\"border-0\" style = {{width: \"20%\"}}>Base 64 Payload</th>*/}\n            </tr>\n            </thead>\n            <tbody>\n                {tableLines}\n            </tbody>\n        </table>\n    )\n}\n","import React, {Fragment, useState, useEffect} from 'react'\nimport {Container, Row, Col, DropdownToggle, DropdownMenu, DropdownItem, Dropdown, Button} from \"shards-react\";\nimport SocketContext from \"../../../SocketContext\";\nimport SendBytesMenu from \"./SendBytesMenu/SendBytesMenu\";\nimport Table from \"./Table/Table\"\nimport encode from \"./Table/encode\";\nimport Base64Binary from \"../../../utils/Base64Binary\";\n\nexport default function DownlinkTab(props){\n    return(\n        <Fragment>\n            <SocketContext.Consumer>\n                {socket => <DownlinkTabInner {...props} socket={socket}/>}\n            </SocketContext.Consumer>\n        </Fragment>\n    )\n}\n\nfunction stringifyBytes(bytes){\n    let stringBytes=\"\"\n    for (var i = 0; i < bytes.length; i++){\n        let byte = bytes[i].toString(16).toUpperCase()\n        if (byte.split(\"\").length === 1)\n            byte = \"0\" + byte\n        stringBytes+= byte\n    }\n\n    return stringBytes\n}\n\nfunction DownlinkTabInner({sensorData, display, device, socket, manual}) {\n    const [activeCategory, setActiveCategory] = useState()\n    const [categorySelect, setCategorySelect] = useState(false)\n    const [downlinksObject, setDownlinksObject] = useState({})\n    const [encodedObject, setEncodedObject] = useState(\"\")\n    const [encodedString, setEncodedString] = useState(\"\")\n\n    const handleCategoryClick = (category) => {\n        setActiveCategory(category)\n    }\n\n    const sendDownlink = () => {\n        var entries = Object.entries(encodedObject)\n        for (const entry of entries) {\n            socket.emit(\"downlink\", {\n                deveui: device.deviceEUI,\n                port: entry[0],\n                base64: Base64Binary.encode(entry[1])\n            })\n            console.log({\n                deveui: device.deviceEUI,\n                port: entry[0],\n                base64: Base64Binary.encode(entry[1])\n            })\n        }\n\n    }\n\n    useEffect(()=>{\n        if (sensorData && sensorData.downlink) {\n            setActiveCategory( (Object.keys(sensorData.downlink))[0] )\n        }\n    }, [])\n\n    useEffect(()=>{\n        if (downlinksObject && sensorData.downlink){\n            setEncodedObject(encode(downlinksObject, sensorData.downlink))\n            let entries = Object.entries(encode(downlinksObject, sensorData.downlink))\n            let str = \"\"\n            for (let entry of entries){\n                str+=`\n                Port ${entry[0]}: \n                >>>Base 64 - ${Base64Binary.encode(entry[1])}\n                >>>Hex     - ${stringifyBytes(entry[1])}\n                `\n            }\n            setEncodedString(str)\n        }\n    }, [downlinksObject])\n\n    useEffect(()=>{\n        setDownlinksObject({})\n    }, [sensorData])\n\n    return (\n        <Fragment>\n            <Container style={{display: display}} fluid>\n\n                <Row style={{display: !manual ? \"flex\" : \"none\"}}>\n                    <Dropdown open={categorySelect} toggle={()=>setCategorySelect(!categorySelect)} >\n                        <DropdownToggle>{activeCategory}</DropdownToggle>\n                        <DropdownMenu>\n                            {(Object.keys(sensorData.downlink)).map((el, i)=>{\n                                return (\n                                    <DropdownItem onClick={()=>handleCategoryClick(el)}>\n                                        {el}\n                                    </DropdownItem>\n                                )\n                            })}\n                        </DropdownMenu>\n                    </Dropdown>\n                    <Button\n                        style={{marginLeft: 20}}\n                        disabled = {!device}\n                        onClick={sendDownlink}\n                        theme=\"success\"\n                    >\n                        Send\n                    </Button>\n                </Row>\n\n                {/*<Row>*/}\n                {/*    <pre>*/}\n                {/*        {JSON.stringify(downlinksObject, null, 2)}*/}\n                {/*    </pre>*/}\n                {/*</Row>*/}\n\n                <Row>\n                    <pre>\n                         {encodedString}\n                    </pre>\n\n                </Row>\n\n                <Row style={{display: manual ? \"block\" : \"none\"}}>\n                    <SendBytesMenu device = {device}/>\n                </Row>\n\n                <Row style={{display: !manual ? \"block\" : \"none\"}}>\n\n                    <Col sm={12} lg={12} xs={12}>\n                        <Table\n                            rawData = {sensorData.raw}\n                            downlinkData = {sensorData.downlink}\n                            category = {activeCategory}\n                            device = {device}\n                            setDownlinksObject={setDownlinksObject}\n                        />\n                    </Col>\n\n                </Row>\n\n            </Container>\n        </Fragment>\n    )\n}\n","import React, {Fragment, useState, useEffect} from 'react'\nimport {\n    Card,\n    CardHeader,\n    Col,\n    Container,\n    Row,\n    Button,\n    CardBody,\n    DropdownToggle,\n    DropdownMenu,\n    DropdownItem, Dropdown, FormInput, FormRadio, FormCheckbox\n} from \"shards-react\";\nimport Base64Binary from \"../../utils/Base64Binary\"\nimport SocketContext from \"../../SocketContext\";\nimport MenuCol from \"../MenuCol/MenuCol\";\nimport UplinkTab from \"./UplinkTab/UplinkTab\";\nimport DownlinkTab from \"./DownlinkTab/DownlinkTab\";\n\nexport default function MainView(props){\n    return(\n        <Fragment>\n            <SocketContext.Consumer>\n                {socket => <MainViewInner {...props} socket={socket}/>}\n            </SocketContext.Consumer>\n        </Fragment>\n    )\n}\n\nfunction MainViewInner({socket, sensorData, external}){\n    if (socket) {\n\n    }\n    const [applications,       setApplications]       = useState([]) //TODO: applications and devices should be classes\n    // maybe some sort of a \"smart\" array class that holds one extra variable, which is the \"active\" element\n    const [activeApplication,  setActiveApplication]  = useState()\n    const [devices,            setDevices]            = useState({})\n    const [activeDevice,       setActiveDevice]       = useState()\n    const [isDownlinkSelected, setIsDownlinkSelected] = useState(false)\n    const [directionSelect,    setDirectionSelect]    = useState(false)\n    const [displayIndex,       setDisplayIndex]       = useState(0)\n    const [manual,             setManual]             = useState(false) // whether you want to manually write bytes OR build a message\n\n    /****** MANUAL DECODER ******/\n    const [payload,    setPayload]    = useState(\"\")\n    const [port,      setPort]      = useState(\"\")\n    const [isHex,     setIsHex]     = useState(false)\n    const [encrypted, setEncrypted] = useState(false)\n    const [appkey,    setAppkey]    = useState(\"\")\n    const [nwkkey,    setNwkkey]    = useState(\"\")\n    /****************************/\n\n    const handleApplicationChange = (application) => {\n        setActiveApplication(application)\n        console.log(application.id.id)\n        socket.emit(\"openApplication\", application.id.id)\n    }\n\n    const handleDeviceChange = (device) => {\n        setActiveDevice(device)\n        console.log(device)\n        socket.emit(\"openDevice\", device)\n    }\n\n    const decode = () => {\n        let base64payload;\n        if (isHex) {\n            let bytes = hexStringToBytes(payload)\n            base64payload = Base64Binary.encode(bytes)\n        } else {\n            base64payload = payload\n        }\n\n        let obj;\n        if (encrypted) {\n            obj = {\n                nwkkey: nwkkey,\n                appkey: appkey,\n                payload: base64payload\n            }\n        } else {\n            obj = {\n                payload: base64payload,\n                port: port\n            }\n        }\n        socket.emit(\"decode\", obj)\n    }\n\n    useEffect(()=>{\n        socket\n        .on(\"userApplications\", (applications) => {\n            console.log(applications)\n            setApplications(applications)\n            handleApplicationChange(applications ? applications[0]: null)\n        })\n        .on(\"applicationDevices\", (devices) => {\n            console.log(devices)\n            setDevices(devices)\n            handleDeviceChange(devices ? devices[0] : null)\n        })\n\n    }, [socket])\n\n    return (\n        <Fragment>\n            <div>\n                <Container fluid>\n                    <Row>\n                        <MenuCol\n                            style={{display: external ? \"none\" : \"inline-block\"}}\n                            lg={2}\n                            header=\"Applications\"\n                            items={applications}\n                            onClick={handleApplicationChange}\n                            getItemDisplay={(item) => item.name}\n                        />\n\n                        <MenuCol\n                            style={{display: external ? \"none\" : \"inline-block\"}}\n                            lg={2}\n                            header={\"Devices\"}\n                            items={devices}\n                            onClick={handleDeviceChange}\n                            getItemDisplay={(item) => item.name}\n                        />\n\n                        <Col sm={12} lg={4} xs={12} style={{display: !external ? \"none\" : \"inline-block\"}}>\n                            <Card>\n                                <CardHeader>\n                                    Decode Payload\n                                </CardHeader>\n                                <CardBody>\n                                    <div style={{display: \"flex\"}}>\n                                        <FormInput\n                                            placeholder=\"Insert Payload here...\"\n                                            value={payload}\n                                            onChange={(event)=> {setPayload(event.target.value.replace(\" \", \"\"))}}\n                                        />\n                                        <FormInput\n                                            style={{display: encrypted ? \"none\" : \"block\"}}\n                                            placeholder=\"Port\"\n                                            value={port}\n                                            onChange={(event)=> {setPort(event.target.value.replace(\" \", \"\"))}}\n                                        />\n                                    </div>\n\n                                    <div style={{display: \"flex\", justifyContent: \"space-between\"}}>\n                                        <div style={{display: \"flex\"}}>\n                                            <FormRadio\n                                                name=\"hex\"\n                                                checked={!isHex}\n                                                onChange={()=>setIsHex(false)}\n                                            >\n                                                Base 64\n                                            </FormRadio>\n                                            <FormRadio\n                                                style={{paddingLeft: 20}}\n                                                name=\"hex\"\n                                                checked={isHex}\n                                                onChange={()=>setIsHex(true)}\n                                            >\n                                                Hex\n                                            </FormRadio>\n                                        </div>\n                                        <FormCheckbox\n                                            checked={encrypted}\n                                            onChange={()=>setEncrypted(!encrypted)}\n                                        >\n                                            LoRa-encrypted\n                                        </FormCheckbox>\n                                    </div>\n                                    <div style={{display: !encrypted ? \"none\" : \"block\"}}>\n                                        <FormInput\n                                            placeholder=\"App Session Key\"\n                                            value={appkey}\n                                            onChange={(event)=> {setAppkey(event.target.value.replace(\" \", \"\"))}}\n                                        />\n                                        <FormInput\n                                            placeholder=\"Network Session Key\"\n                                            value={nwkkey}\n                                            onChange={(event)=> {setNwkkey(event.target.value.replace(\" \", \"\"))}}\n                                        />\n                                    </div>\n                                    <Button onClick={decode}>\n                                        Decode\n                                    </Button>\n                                </CardBody>\n                            </Card>\n                        </Col>\n\n                        <Col sm={12} lg={8} xs={12}>\n                            <Card>\n                                <CardHeader style={{display: 'flex'}}>\n                                    <Dropdown open={directionSelect} toggle={()=>setDirectionSelect(!directionSelect)}>\n                                        <DropdownToggle\n                                            caret\n                                            outline\n                                        >\n                                            {isDownlinkSelected ? \"Downlink\" : \"Uplink\"}\n                                        </DropdownToggle>\n                                        <DropdownMenu>\n                                            <DropdownItem onClick={()=>setIsDownlinkSelected(true)}>\n                                                Downlink\n                                            </DropdownItem>\n                                            <DropdownItem onClick={()=>setIsDownlinkSelected(false)}>\n                                                Uplink\n                                            </DropdownItem>\n                                        </DropdownMenu>\n                                    </Dropdown>\n                                    <Button\n                                        style = {{display: !isDownlinkSelected && !external ? \"inline-block\" : \"none\", marginLeft: 40}}\n                                        onClick={()=> setDisplayIndex(0)}\n                                        active={displayIndex===0}\n                                        outline\n                                        //theme={displayIndex===0 ? \"primary\" : \"light\"}\n                                    >\n                                        Network Server\n                                    </Button>\n                                    <Button\n                                        style = {{display: !isDownlinkSelected ? \"inline-block\" : \"none\", marginLeft: 20 }}\n                                        onClick={()=> setDisplayIndex(1)}\n                                        active={displayIndex===1}\n                                        outline\n                                        //theme={displayIndex===1 ? \"primary\" : \"light\"}\n                                    >\n                                        App\n                                    </Button>\n                                    <Button\n                                        style = {{display: !isDownlinkSelected ? \"inline-block\" : \"none\", marginLeft: 20 }}\n                                        onClick={()=> setDisplayIndex(2)}\n                                        active={displayIndex===2}\n                                        outline\n                                        //theme={displayIndex===2 ? \"primary\" : \"light\"}\n                                    >\n                                        LoRaMAC\n                                    </Button>\n                                    <Button\n                                        style = {{display: isDownlinkSelected ? \"inline-block\" : \"none\", marginLeft: 20}}\n                                        onClick={()=>setManual(true)}\n                                        active={manual}\n                                        outline\n                                    >\n                                        Manual\n                                    </Button>\n                                    <Button\n                                        style = {{display: isDownlinkSelected ? \"inline-block\" : \"none\", marginLeft: 0}}\n                                        onClick={()=>setManual(false)}\n                                        active={!manual}\n                                        outline\n                                    >\n                                        Generate\n                                    </Button>\n                                </CardHeader>\n                                <CardBody>\n                                    <UplinkTab\n                                        display = {!isDownlinkSelected ? \"flex\" : \"none\" }\n                                        displayIndex = {displayIndex}\n                                    />\n                                    {\n                                        sensorData && sensorData.downlink && sensorData.raw ?\n                                            <DownlinkTab\n                                                display = {isDownlinkSelected ? \"block\" : \"none\" }\n                                                manual = {manual}\n                                                sensorData = {sensorData}\n                                                device = {activeDevice}\n                                            />\n                                            :\n                                            null\n                                    }\n                                </CardBody>\n                            </Card>\n                        </Col>\n                    </Row>\n                </Container>\n            </div>\n        </Fragment>\n    )\n}\n\nfunction hexStringToBytes (hexString) {\n    let string = hexString.split(\"\")\n    let byte_array = []\n    while (string.length > 0) {\n        byte_array = [...byte_array, parseInt(\"0x\"+(string.splice(0, 2)).join(\"\"))]\n    }\n    // console.log(byte_array)\n    return byte_array\n}\n","import React, {Fragment} from 'react'\n\nimport './404.scss'\n\nexport const notFoundPage = () => {\n  return (\n    <Fragment>\n    <h2>404 Page</h2>\n    </Fragment>\n  )\n}\n\nexport default notFoundPage\n\n","import React from 'react'\n//import styled from 'styled-components'\n\nimport {Col, Container, Nav, NavItem, Row,} from 'shards-react'\nimport './notFoundLayout.scss'\n\n\n/*const Wrapper = styled.div`\n  min-height: 100vh;\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n`*/\n\n\n\nexport const notFoundLayout = (props) => {\n\n  return (\n    <div style={{minHeight: \"100vh\", display: \"flex\", flexDirection: \"column\", justifyContent: \"space-between\"}} >\n        <Container>\n          <Row>\n            <Col>\n            { props.children }\n            </Col>\n          </Row>\n        </Container>\n        <Container className=\"mt-5 footer\" fluid>\n        <Col>\n            <Container>\n              <Col>\n                <Nav className=\"smaller\">\n                <NavItem>\n                  <span className=\"active nav-link smaller\" style={{'color':'#a29898'}}>2009-2020 TEKTELIC Communications Inc.</span>\n                </NavItem>\n                <NavItem>\n                  <a href=\"https://tektelic.com\" className=\"active nav-link smaller\">Tell us about your LoraWAN use cases.</a>\n                </NavItem>\n                </Nav>\n              </Col>\n            </Container>\n          </Col>\n        </Container>\n\n    </div>\n  )\n\n}\n\nexport default notFoundLayout\n","import React from 'react'\nimport {Col, Container, Nav, NavItem} from 'shards-react'\nimport './MainLayout.scss'\n\nexport const MainLayout = (props) => {\n\n  return (\n    <div style={{height:\"100%\"}}>\n\n      { props.children }\n\n      <Container className=\"mt-5\">\n        <Col>\n          <Nav className=\"smaller\">\n          <NavItem>\n            <span className=\"active nav-link smaller\" style={{'color':'#a29898'}}>2009-2020 TEKTELIC Communications Inc.</span>\n          </NavItem>\n          <NavItem>\n            <a href=\"https://tektelic.com\" className=\"active nav-link smaller\">Tell us about your LoraWAN use cases.</a>\n          </NavItem>\n          </Nav>\n        </Col>\n      </Container>\n\n    </div>\n  )\n\n}\n\nexport default MainLayout\n","import React from 'react'\nimport {Route, Switch, withRouter} from 'react-router-dom'\n\nimport notFound from '../../components/404/404'\nimport notFoundLayout from '../../layouts/NotFoundLayout/notFoundLayout'\n\nimport MainPage from '../../components/MainPage/MainPage'\nimport MainLayout from '../../layouts/MainLayout/MainLayout'\n\nconst AppRoute = ({ component: Component, layout: Layout, ...rest }) => (\n  <Route {...rest} render={props => {\n    console.log('props', props)\n\n    return (\n      <Layout>\n        <Component {...props} />\n      </Layout>\n    )\n  }} />\n)\n\nexport const Routes = () => {\n  return (\n    <Switch>\n      <AppRoute exact path='/' layout={MainLayout} component={MainPage} />\n      <AppRoute layout={notFoundLayout} component={notFound} />\n    </Switch>\n  )\n\n}\n\nexport default withRouter(Routes)\n","import React from 'react';\nimport './App.scss';\nimport Router from './app/router/router'\n\nfunction App() {\n  return (\n    <Router />\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React, {useEffect, useState} from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"shards-ui/dist/css/shards.min.css\"\n\nimport SocketContext from \"./SocketContext\";\nimport io from \"socket.io-client\"\nimport {BrowserRouter} from 'react-router-dom'\nrequire('dotenv').config()\n\nlet socket;\nif (process.env.REACT_APP_WS_URL) {\n    socket = io(process.env.REACT_APP_WS_URL)\n} else {\n    throw new Error(\"No URL for WebSocket connection to backend was provided. REACT_APP_WS_URL variable needed in environment\")\n}\n\n// const socket = io(\"https://tek-sensor-backend.ngrok.io\")\n\nReactDOM.render(\n    <SocketContext.Provider value={socket}>\n        <BrowserRouter>\n            <App/>\n        </BrowserRouter>\n    </SocketContext.Provider>\n    ,\n    document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","let helpers = {\n    _keyStr : \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\",\n\n    /* will return a  Uint8Array type */\n    decodeArrayBuffer: function(input) {\n        const bytes = (input.length / 4) * 3;\n        const ab = new ArrayBuffer(bytes);\n        this.decode(input, ab);\n\n        return ab;\n    },\n\n    removePaddingChars: function(input){\n        const lkey = this._keyStr.indexOf(input[input.length - 1]);\n        if(lkey === 64){\n            return input.substring(0,input.length - 1);\n        }\n        return input;\n    }\n}\n\n\nmodule.exports = {\n    decode: function (input, arrayBuffer) {\n        //get last chars to see if are valid\n        input = helpers.removePaddingChars(input);\n        input = helpers.removePaddingChars(input);\n\n        const bytes = parseInt((input.length / 4) * 3, 10);\n\n        let uarray;\n        let chr1, chr2, chr3;\n        let enc1, enc2, enc3, enc4;\n        let i = 0;\n        let j = 0;\n\n        if (arrayBuffer)\n            uarray = new Uint8Array(arrayBuffer);\n        else\n            uarray = new Uint8Array(bytes);\n\n        //input = input.replace(/[^A-Za-z0-9\\+\\/\\=]/g, \"\");\n\n        for (i=0; i<bytes; i+=3) {\n            //get the 3 octets in 4 ascii chars\n            enc1 = helpers._keyStr.indexOf(input[j++]);\n            enc2 = helpers._keyStr.indexOf(input[j++]);\n            enc3 = helpers._keyStr.indexOf(input[j++]);\n            enc4 = helpers._keyStr.indexOf(input[j++]);\n\n            chr1 = (enc1 << 2) | (enc2 >> 4);\n            chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);\n            chr3 = ((enc3 & 3) << 6) | enc4;\n\n            uarray[i] = chr1;\n            if (enc3 !== 64) uarray[i+1] = chr2;\n            if (enc4 !== 64) uarray[i+2] = chr3;\n        }\n\n        return uarray;\n    },\n\n    encode: function (arrayBuffer) {\n        let base64 = '';\n        const encodings = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\n        const bytes = new Uint8Array(arrayBuffer);\n        const byteLength = bytes.byteLength;\n        const byteRemainder = byteLength % 3;\n        const mainLength = byteLength - byteRemainder;\n        let a, b, c, d;\n        let chunk;\n        // Main loop deals with bytes in chunks of 3\n        for (let i = 0; i < mainLength; i = i + 3) {\n            // Combine the three bytes into a single integer\n            chunk = (bytes[i] << 16) | (bytes[i + 1] << 8) | bytes[i + 2];\n            // Use bitmasks to extract 6-bit segments from the triplet\n            a = (chunk & 16515072) >> 18; // 16515072 = (2^6 - 1) << 18\n            b = (chunk & 258048)   >> 12; // 258048   = (2^6 - 1) << 12\n            c = (chunk & 4032)     >>  6; // 4032     = (2^6 - 1) << 6\n            d = chunk & 63;               // 63       = 2^6 - 1\n            // Convert the raw binary segments to the appropriate ASCII encoding\n            base64 += encodings[a] + encodings[b] + encodings[c] + encodings[d];\n        }\n        // Deal with the remaining bytes and padding\n        if (byteRemainder === 1) {\n            chunk = bytes[mainLength];\n            a = (chunk & 252) >> 2; // 252 = (2^6 - 1) << 2\n            // Set the 4 least significant bits to zero\n            b = (chunk & 3)   << 4; // 3   = 2^2 - 1\n            base64 += encodings[a] + encodings[b] + '==';\n        } else if (byteRemainder === 2) {\n            chunk = (bytes[mainLength] << 8) | bytes[mainLength + 1];\n            a = (chunk & 64512) >> 10; // 64512 = (2^6 - 1) << 10\n            b = (chunk & 1008)  >>  4; // 1008  = (2^6 - 1) << 4\n            // Set the 2 least significant bits to zero\n            c = (chunk & 15)    <<  2; // 15    = 2^4 - 1\n            base64 += encodings[a] + encodings[b] + encodings[c] + '=';\n        }\n        return base64;\n    }\n\n};\n"],"sourceRoot":""}